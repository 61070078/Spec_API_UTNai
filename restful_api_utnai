swagger: '2.0'
info:
  description: This is a simple API
  version: 1.0.0
  title: Simple Inventory API
tags:
- name: Employer
- name: Employee
- name: user
  description: Unregistered user

paths:
  /register:
    post:
      tags:
      - user
      summary: create user
      description: This function for create user
      operationId: createUser
      parameters:
      - in: "body"
        name: "infomation"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/user"
      responses:
        201:
          description: Created
          schema:
            $ref: '#/definitions/user'
        400:
          description: Plase Enter Information
          schema:
                type: object
                properties:
                  statuscode:
                    type: string
                    example: "4000001"
                  statustext:
                    type: string
                    example: "Field not complete"
                  email:
                    type: string
                    example: "Plase Enter Email"
                  passworld:
                    type: string
                    example: "Plase Enter Passworld"
                  firstname:
                    type: string
                    example: "Plase Enter Firstname"
                  lastname:
                    type: string
                    example: "Plase Enter Lastname"
                  gender:
                    type: string
                    example: "Plase Enter Gender"
                  birthday:
                    type: string
                    example: "Plase Enter Birthday"

  /login:
    post:
      tags: 
      - user
      summary: login user 
      description: This function for login
      operationId: login user
      parameters: 
      - in: "body"
        name: "data"
        description: "load data from server"
        required: true
        schema:
          $ref: "#/definitions/login"
      responses: 
        200:
          description: Login is successful
          schema:
            $ref: "#/definitions/login"
        400:
          description: Login is unsuccessful
          schema:
                type: object
                properties:
                  statuscode:
                    type: string
                    example: "4000002"
                  statustext:
                    type: string
                    example: "Login is unsuccessful"
                  email:
                    type: string
                    example: "Plase Enter Email"
                  passworld:
                    type: string
                    example: "Plase Enter Passworld"
        406:
          description: Login is unsuccessful
          schema:
                type: object
                properties:
                  statuscode:
                    type: string
                    example: "4060002"
                  statustext:
                    type: string
                    example: "Login is unsuccessful"
                  passworld:
                    type: string
                    example: "Passworld is incorrect"
  /interest:
    post:
      tags:
      - Employee
      summary: Interest selection
      description: ""
      operationId: interestSelection
      parameters:
      - in: "body"
        name: "interest data"
        description: ""
        required: true
        schema:
          $ref: '#/definitions/interest'
      responses:
        200:
          description: Interest selected
          schema:
            $ref: '#/definitions/interest'
        400:
          description: Field not complete
          schema:
                type: object
                properties:
                  statusCode:
                    type: string
                    example: "40000003"
                  statusText:
                    type: string
                    example: Field not complete
                  interest:
                    type: string
                    example: "Please select your interest"

  /profile/{id}:
    get:
      tags:
      - Employee
      summary: Show employee profile
      description: ""
      operationId: showProfile
      parameters:
        - in: "path"
          name: "id"
          required: true
          type: integer
          format: int32
          
      responses:
          200:
            description: OK
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: tae_chanhom@hotmail.com
                passworld:
                  type: string
                  example: 029959866Tae
                gender:
                  type: string
                  example: male
                brithday:
                  type: string
                  example: 14/12/42
                firstname:
                  type: string
                  example: John
                lastname:
                  type: string
                  example: Smith
                interest:
                  type: string
                  example: Coffee Shop
                age:
                  type: integer
                  example: 20
                language:
                  type: string
                  example: Thai
                experience:
                  type: string
                  example: none

  /category:
    post:
      tags: 
      - Employer
      summary: shop infomation
      description: This function for infomation
      operationId: category infomation
      parameters: 
      - in: "body"
        name: "category data"
        description: This function for login
        required: true
        schema:
          $ref: '#/definitions/category'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/category'
  
  /category/edit:
    put:
      tags: 
      - Employer
      summary: Employer can edit infomation in this path
      description: This function for infomation
      operationId: category edit
      parameters: 
      - in: "body"
        name: "category edit"
        description: this function can edit post
        required: true
        schema:
          $ref: '#/definitions/category'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/category'
            
  /role:
    post:
      tags:
      - user
      summary: User can select their role in this page
      description: " "
      operationId: roleSelection
      parameters:
      - in: "body"
        name: "Role selection"
        description: "Role Selection"
        required: true
        schema:
          $ref: '#/definitions/role'
      responses:
        200:
          description: "Role Selected"
          schema:
            $ref: "#/definitions/role"
  
  /location/employer:
    get:
      tags: 
      - Employer
      summary: ""
      description: this is a page to show employee
      parameters: 
      - in: "body"
        name: "employee_list"
        description: employee list
        required: true
        schema:
          $ref: '#/definitions/employee_list'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/employee_list'
            
  /location/post:
    get:
      tags: 
      - Employer
      summary: ""
      description: ""
      parameters: 
      - in: "body"
        name: "Post_list"
        description: Post list
        required: true
        schema:
          $ref: '#/definitions/post_list'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/post_list'


definitions:
  user: 
    type: object
    required:
    - email
    - passworld
    - gender
    - birthday
    - firstname
    - lastname
    - id
    properties:
      email:
        type: string
        example: tae_chanhom@hotmail.com
      passworld:
        type: string
        example: 029959866Tae
      gender:
        type: string
        example: male
      brithday:
        type: string
        example: 14/12/42
      firstname:
        type: string
        example: John
      lastname:
        type: string
        example: Smith
      id:
        type: integer
        example: 512
        
  login:
    type: object
    required: 
    - email
    - password
    properties:
      email:
        type: string
        example: john777@gmail.com
      password:
        type: string
        example: supersecret777

  category:
    type: object
    required: 
    - shopname
    - description
    - wage
    - min
    - max
    - location
    - province
    properties:
      shopname:
        type: string
        example: coffee shop
      description:
        type: string
        example: information about you shop
      wage:
        type: string
        example: Week
      min:
        type: integer
        example: 1000
      max:
        type: integer
        example: 8000
      location:
        type: string
        example: lamlugar 12130
      province:
        type: string
        example: bangkok
  role:
    type: object
    required:
    - role
    properties:
      role:
        type: string
        example: Employee
        
  interest:
    type: object
    required:
    - interest
    properties:
      interest:
        type: string
        example: Coffee shop

  employee_list:
    type: object
    required: 
    - name
    - occupation
    - age
    properties:
      name:
        type: string
        example: tae
      occupation:
        type: string
        example: Selesperson
      age:
        type: integer
        example: 24
        
  post_list:
    type: object
    required: 
    - shopname
    - category
    - province
    properties:
      shopname:
        type: string
        example: U-Coffee
      category:
        type: string
        example: Coffee Shop
      province:
        type: string
        example: Bangkok
  
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
# basePath: /61070078/test/1.0.0
schemes:
 - https
# Added by API Auto Mocking Plugin
# basePath: /61070078/UTnai_v01/1.0.0
# Added by API Auto Mocking Plugin
# basePath: /61070078/UTNai_V01_API/1.0.0
# Added by API Auto Mocking Plugin
basePath: /61070089/UTNai_API/1.0.0
