openapi: 3.0.0
servers:
  - url: 'https://virtserver.swaggerhub.com/61070078/UTNai_V01_API/1.0.0'
info:
  description: This is a simple API
  version: "1.0.0-oas3"
  title: UTNai API
tags:
  - name: Employee
  - name: Auth
  - name: Post
  - name: Interrest
  - name: Chat
  - name: Package
  - name: Employee Profile
  - name: Employer Profile
  - name: Account
  - name: OderPackage

paths:
#Auth --------------------------------------------------------------------------

  /auth/register:
    post:
      tags:
        - Auth
      summary: Create user
      description: This function for create user
      operationId: createUser
      security: []
      responses:
        '201':
          description: Created
          content:
            '*/*':
              schema:
                properties:
                  statuscode:
                    type: string
                    example: '2010001'
                  statustext:
                    type: string
                    example: Created
                  user:
                    $ref: '#/components/schemas/returnregis'
                type: object
        '400':
          description: Plase Enter Information
          content:
            '*/*':
              schema:
                type: object
                properties:
                  statuscode:
                    type: string
                    example: '4000001'
                  statustext:
                    type: string
                    example: Field not complete

      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
        description: Created user object
        required: true
  /auth/login/email:
    post:
      tags:
        - Auth
      summary: login user
      description: This function for login
      operationId: login user
      security: []
      responses:
        '200':
          description: Login is successful
          content:
            '*/*':
              schema:
                properties:
                  statusCode:
                    type: integer
                    example: 2000001
                  statusText:
                    type: string
                    example: Login successful
                  user:
                    $ref: '#/components/schemas/returnregis'
                type: object
        '400':
          description: Login is unsuccessful
          content:
            '*/*':
              schema:
                properties:
                  statuscode:
                    type: string
                    example: '4000002'
                  statustext:
                    type: string
                    example: Login is unsuccessful
                type: object
      requestBody:
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                  example: sanchez@mail.com
                password:
                  type: string
                  example: rickiest_rick
              type: object
        description: load data from server
        required: true
  /auth/login/facebook:
    post:
      tags:
        - Auth
      summary: login user
      description: This function for login
      operationId: login users
      responses:
        '200':
          description: Login is successful
          content:
            '*/*':
              schema:
                properties:
                  statusCode:
                    type: integer
                    example: 2000001
                  statusText:
                    type: string
                    example: Login successful
                  token:
                    properties:
                      email:
                        type: string
                        example: sanchez@mail.com
                      token:
                        type: object
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.
                    type: object
                type: object
        '400':
          description: Login is unsuccessful
          content:
            '*/*':
              schema:
                properties:
                  statuscode:
                    type: string
                    example: '4000002'
                  statustext:
                    type: string
                    example: Login is unsuccessful
                type: object
      requestBody:
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                  example: sanchez@mail.com
                facebookId:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.
              type: object
        description: load data from server
        required: true
  /auth/login/google:
    post:
      tags:
        - Auth
      summary: login user
      description: This function for login
      operationId: loginUser
      responses:
        '200':
          description: Login is successful
          content:
            '*/*':
              schema:
                properties:
                  statusCode:
                    type: integer
                    example: 2000001
                  statusText:
                    type: string
                    example: Login successful
                  token:
                    properties:
                      token:
                        type: object
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.
                    type: object
                type: object
        '400':
          description: Login is unsuccessful
          content:
            '*/*':
              schema:
                properties:
                  statuscode:
                    type: string
                    example: '4000002'
                  statustext:
                    type: string
                    example: Login is unsuccessful
                type: object
      requestBody:
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                  example: sanchez@mail.com
                googleId:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.
              type: object
        description: load data from server
        required: true
  /auth/otp/send:
    post:
      tags:
        - Auth
      summary: Reset Password
      description: ''
      responses:
        '200':
          description: Reseting E-mail sent to server
          content:
            '*/*':
              schema:
                properties:
                  statusCode:
                    type: integer
                    example: 2000010
                  statusText:
                    type: string
                    example: E-mail sent!
                  OTP:
                    properties:
                      refNo:
                        type: integer
                        example: 1872
                      email:
                        type: string
                        example: sanchez@mail.com
                      expire:
                        type: string
                        example: 2018-10-18-09-45-33
                    type: object
                type: object
      requestBody:
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                  example: sanchez@mail.com
              type: object
        required: true
  /auth/otp/check:
    post:
      tags:
        - Auth
      summary: Reset Password
      description: ''
      responses:
        '200':
          description: ''
          content:
            '*/*':
              schema:
                properties:
                  statusCode:
                    type: integer
                    example: 2000010
                  statusText:
                    type: string
                    example: OTP valid
                type: object
        '400':
          description: ''
          content:
            '*/*':
              schema:
                properties:
                  statusCode:
                    type: integer
                    example: 4000004
                  statusText:
                    type: string
                    example: Invalid OTP
                type: object
      requestBody:
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                  example: sanchez@mail.com
                otp:
                  type: integer
                  example: 4834
                refNo:
                  type: integer
                  example: 1148
              type: object
        required: true
  /auth/changepass:
    put:
      tags:
        - Auth
      summary: Reset password from token
      description: ''
      responses:
        '200':
          description: Password Changed!
          content:
            '*/*':
              schema:
                properties:
                  statusCode:
                    type: integer
                    example: 2000010
                  statusText:
                    type: string
                    example: Password Changed!
                type: object
      requestBody:
        content:
          application/json:
            schema:
              properties:
                changepassToken:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.
                newPass:
                  type: string
                  example: Rickiest_rick
                confirm:
                  type: string
                  example: Rickiest_rick
              type: object
        required: true
  /auth/logout:
    post:
      tags:
        - Auth
      summary: Logout
      description: ''
      operationId: logout
      responses:
        '200':
          description: Token deleted
          content:
            '*/*':
              schema:
                properties:
                  statuscode:
                    type: integer
                    example: '2000022'
                  statustext:
                    type: string
                    example: Deleted
                type: object

#Account -----------------------------------------------------------------------

  /account:
    put:
      tags:
        - Account
      summary: Change Password
      description: ''
      operationId: changePass
      responses:
        '200':
          description: Changed
          content:
            '*/*':
              schema:
                properties:
                  statusCode:
                    type: integer
                    example: 2000011
                  statusText:
                    type: string
                    example: OK
                type: object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/change'
        description: Updated user object
        required: true
    delete:
      tags:
        - Account
      summary: Delete Accout
      description: ''
      operationId: Delete
      responses:
        '200':
          description: Deleted
          content:
            '*/*':
              schema:
                properties:
                  statusCode:
                    type: integer
                    example: 2000012
                  statusText:
                    type: string
                    example: Deleted
                type: object
        '400':
          description: User not found
          content:
            '*/*':
              schema:
                properties:
                  statusCode:
                    type: integer
                    example: 4000006
                  statusText:
                    type: string
                    example: Bad request
                type: object

#Employee Profile --------------------------------------------------------------

  /profile/employee:
    get:
      tags:
        - Employee Profile
      summary: Show employee profile
      description: ''
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/profile_employee'
        '400':
          description: This id does not exist
    put:
      tags:
        - Employee Profile
      summary: For employee to edit their profile
      description: ''
      operationId: editProfile
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/profile_employee'
      requestBody:
        $ref: '#/components/requestBodies/profile_employee'

#Employeer Profile -------------------------------------------------------------

  /profile/employeer:
    get:
      tags:
        - Employer Profile
      summary: Employer Information
      description: ''
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/profile_employer'
        '408':
          description: Request Timeout
          content:
            '*/*':
              schema:
                type: object
                properties:
                  statusCode:
                    type: string
                    example: '40800009'
                  statusText:
                    type: string
                    example: Request Timeout
    put:
      tags:
        - Employer Profile
      summary: For employer to edit their profile
      description: ''
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/profile_employer'
        '400':
          description: Login is unsuccessful
          content:
            '*/*':
              schema:
                type: object
                properties:
                  statuscode:
                    type: string
                    example: '4000003'
                  statustext:
                    type: string
                    example: Create is unsuccessful
                  companyname:
                    type: string
                    example: Plase Enter Company Name
                  phonenumber:
                    type: string
                    example: Plase Enter Phone Number
                  email:
                    type: string
                    example: Plase Enter Email
                  website:
                    type: string
                    example: Plase Enter Website
                  address:
                    type: string
                    example: Plase Enter Address
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/profile_employer'
        required: true
  
#Post --------------------------------------------------------------------------

  /post:
    post:
      tags:
        - Post
      summary: Employer can create  new post in this path.
      description: ''
      responses:
        '201':
          description: Created!
          content:
            '*/*':
              schema:
                type: object
                properties:
                  statusCode:
                    type: string
                    example: '2010002'
                  statusText:
                    type: string
                    example: Create is successful
                  post:
                    $ref: '#/components/schemas/post'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                category:
                  type: string
                shopName:
                  type: string
                description:
                  type: string
                wage:
                  type: string
                min:
                  type: integer
                max:
                  type: integer
                location:
                  type: string
                province:
                  type: string
                occupation:
                  type: string
                createdAt:
                  type: string
                updatedAt:
                  type: string
    get:
      tags:
        - Post
      summary: This page show post list
      description: ''
      parameters:
        - in: path
          name: query
          required: true
          description: Search data.
          schema:
            type: string
      responses:
        '200':
          description: Successful
          content:
            '*/*':
              schema:
                properties:
                  statusCode:
                    type: string
                    example: '20000009'
                  statusText:
                    type: string
                    example: Show post successful
                  posts:
                    type: array
                    items:
                      $ref: '#/components/schemas/post'
                  search:
                    type: object
                    properties:
                      key:
                        type: string
                        example: name
                      query:
                        type: string
                        example: U-coffee
                  pagination:
                    $ref: '#/components/schemas/pagination'
                type: object
    
  /post/{postID}:
    get:
      tags:
        - Post
      summary: Show infomation post's employer
      description: ''
      parameters:
        - in: path
          name: postID
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful
          content:
            '*/*':
              schema:
                type: object
                properties:
                  statusCode:
                    type: string
                    example: '2000005'
                  statusText:
                    type: string
                    example: Successful
                  show:
                    $ref: '#/components/schemas/post'
    put:
      tags:
        - Post
      summary: Employer can edit or update infomation in this path.
      description: ''
      operationId: ''
      parameters:
        - in: path
          name: postID
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '202':
          description: Accepted!
          content:
            '*/*':
              schema:
                properties:
                  statusCode:
                    type: string
                    example: '2020001'
                  statusText:
                    type: string
                    example: Update is successful
                  post:
                    $ref: '#/components/schemas/post'
                type: object
        '400':
          description: Delete is unsuccessful
          content:
            '*/*':
              schema:
                type: object
                properties:
                  statuscode:
                    type: string
                    example: '4000005'
                  statustext:
                    type: string
                    example: Update is unsuccessful
      requestBody:
        $ref: '#/components/requestBodies/post'
    delete:
      tags:
        - Post
      summary: Employer can delete infomation in this path.
      description: ''
      parameters:
        - in: path
          name: postID
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '202':
          description: Accepted!
          content:
            '*/*':
              schema:
                properties:
                  statusCode:
                    type: string
                    example: '2020001'
                  statusText:
                    type: string
                    example: Delete is successful
                type: object
        '400':
          description: Delete is unsuccessful
          content:
            '*/*':
              schema:
                type: object
                properties:
                  statuscode:
                    type: string
                    example: '4000005'
                  statustext:
                    type: string
                    example: Delete is unsuccessful

#Package -----------------------------------------------------------------------

  /package:
    get:
      tags:
        - Package
      summary: Show package list
      description: ''
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                properties:
                  statusCode:
                    type: string
                    example: '2000021'
                  statusText:
                    type: string
                    example: Successful
                  packages:
                    type: array
                    items:
                      type: object
                      properties:
                        package:
                          $ref: '#/components/schemas/package'
                  pagination:
                    $ref: '#/components/schemas/pagination'
                  search:
                    $ref: '#/components/schemas/search'
                type: object

  /package/{packID}:
    get:
      tags:
        - Package
      summary: Show package list
      description: ''
      parameters:
        - in: path
          name: packID
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                properties:
                  statusCode:
                    type: string
                    example: '2000021'
                  statusText:
                    type: string
                    example: Successful
                  package:
                    $ref: '#/components/schemas/package'
                type: object

#OderPackage ----------------------------------------------------------------------

  /oderPackage:
    post:
      tags:
        - OderPackage
      summary: ''
      description: ''
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
                properties:
                  statusCode:
                    type: string
                    example: '2000002'
                  statusText:
                    type: string
                    example: OK
                  package:
                    $ref: '#/components/schemas/package'
    get:
      tags:
        - OderPackage
      summary: ''
      description: ''
      parameters:
        - in: path
          name: query
          required: true
          description: Search data.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                properties:
                  statusCode:
                    type: string
                    example: '20000009'
                  statusText:
                    type: string
                    example: Show Information Successful
                  oders:
                    type: array
                    items:
                      $ref: '#/components/schemas/package'
                  search:
                    $ref: '#/components/schemas/search'
                  pagination:
                    $ref: '#/components/schemas/pagination'
                type: object
  
  /oderPackage/{oderPackageId}:
    get:
      tags:
        - OderPackage
      summary: ''
      description: ''
      parameters:
        - in: path
          name: oderPackageId
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
                properties:
                  statusCode:
                    type: string
                    example: '2000005'
                  statusText:
                    type: string
                    example: OK
                  show:
                    $ref: '#/components/schemas/package'

#Employee ----------------------------------------------------------------------

  /employee:
    get:
      tags:
        - Employee
      summary: Employees list
      description: ''
      operationId: ''
      parameters:
        - in: path
          name: query
          required: true
          description: Search data.
          schema:
            type: string
        - in: path
          name: category
          required: true
          description: Category
          schema:
            type: string
        - in: path
          required: true
          name: province
          description: Province
          schema:
            type: string
      responses:
        '200':
          description: Successful
          content:
            '*/*':
              schema:
                properties:
                  statusCode:
                    type: string
                    example: '2000015'
                  statusText:
                    type: string
                    example: Successful
                  employees:
                    type: array
                    items:
                      type: object
                      properties:
                        id: 
                          type: integer
                        name:
                          type: string
                        ocoupation:
                          type: string
                        age:
                          type: string
                        image:
                          type: string
                  pagination: 
                    $ref: '#/components/schemas/pagination'
                  search:
                    $ref: '#/components/schemas/search'
                type: object

  /employee/{employeeId}:
    get:
      tags:
        - Employee
      summary: Profile's employee
      description: ''
      operationId: ''
      parameters:
        - in: path
          name: employeeId
          required: true
          description: Search data.
          schema:
            type: string
      responses:
        '200':
          description: Successful
          content:
            '*/*':
              schema:
                properties:
                  statusCode:
                    type: string
                    example: '2000015'
                  statusText:
                    type: string
                    example: Successful
                  employee:
                    $ref: '#/components/schemas/profile_employee'
                type: object

#interests ---------------------------------------------------------------------

  /interest:
    get:
      tags:
        - Interrest
      summary: This page show interests employee list
      description: ''
      parameters:
        - in: path
          name: query
          required: true
          description: Search data.
          schema:
            type: string
      responses:
        '200':
          description: Successful
          content:
            '*/*':
              schema:
                properties:
                  statuscode:
                    type: string
                    example: '2000017'
                  statustext:
                    type: string
                    example: Successful
                  interests:
                    type: array
                    items:
                      $ref: '#/components/schemas/profile_employee'
                  search:
                    type: object
                    properties:
                      key:
                        type: string
                        example: name
                      query:
                        type: string
                        example: U-coffee
                type: object

#Chat --------------------------------------------------------------------------

  /chat:
    post:
      tags:
        - Chat
      summary: ''
      description: ''
      parameters:
        - in: path
          name: partnerId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Add!
          content:
            '*/*':
              schema:
                type: object
                properties:
                  statusCode:
                    type: string
                    example: '2010002'
                  statusText:
                    type: string
                    example: Create is successful
                  partner:
                    type: object
                    properties:
                      partnerId:
                        type: integer
                        example: 1
    get:
      tags:
        - Chat
      summary: This page show chat list
      description: ''
      parameters:
        - in: path
          name: query
          required: true
          description: Search data.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                properties:
                  statusCode:
                    type: string
                    example: '2000016'
                  statusText:
                    type: string
                    example: Successful
                  chats:
                    type: array
                    items:
                      type: object
                      properties:
                        firebaseToken:
                          type: string
                        createdAt:
                          type: string
                        updatedAt:
                          type: string
                        partner:
                          $ref: '#/components/schemas/profile_employee'
                  search:
                    type: object
                    properties:
                      key:
                        type: string
                        example: key
                      query:
                        type: string
                  pagination:
                    $ref: '#/components/schemas/pagination'
                type: object
    put:
      tags:
        - Chat
      summary: ''
      description: ''
      operationId: ''
      parameters:
        - in: path
          name: partnerId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Blocked!
          content:
            '*/*':
              schema:
                properties:
                  statusCode:
                    type: string
                    example: '2020001'
                  statusText:
                    type: string
                    example: Update is successful
                  block:
                    type: object
                    properties:
                      partnerId:
                        type: integer
                type: object
    delete:
      tags:
        - Chat
      summary: ''
      description: ''
      parameters:
        - in: path
          name: partnerId
          required: true
          schema:
            type: integer
      responses:
        '202':
          description: Deleted
          content:
            '*/*':
              schema:
                properties:
                  statusCode:
                    type: string
                    example: '2020001'
                  statusText:
                    type: string
                    example: Delete is successful
                type: object
        '400':
          description: Delete is unsuccessful
          content:
            '*/*':
              schema:
                type: object
                properties:
                  statuscode:
                    type: string
                    example: '4000005'
                  statustext:
                    type: string
                    example: Delete is unsuccessful

#===============================================================================

security:
  - bearerAuth: []  
  
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT  
  schemas:
    pagination:
      type: object
      properties:
        currentPage: 
          type: integer
        totalPage:
          type: integer
        perPage:
          type: integer
        totalItem:
          type: integer

    search:
      type: object
      properties:
        key: 
          type: string
        query:
          type: string

    filter_employee:
      type: object
      required:
        - distant
        - province
        - category
      properties:
        distant:
          type: integer
          example: 50
        province:
          type: string
          example: bangkok
        category:
          type: string
          example: Bar

    filter_employer:
      type: object
      required:
        - category
        - province
      properties:
        category:
          type: string
          example: CEO
        province:
          type: string
          example: bangkok

    change:
      type: object
      required:
        - oldpass
        - newpass
        - confirm
      properties:
        oldPass:
          type: string
          example: swaggerisveryeasy
        newPass:
          type: string
          example: ricksanchez12345
        confirm:
          type: string
          example: ricksanchez12345

    user:
      type: object
      required:
        - email
        - passworld
        - gender
        - birthday
        - firstname
        - lastname
        - interest
        - role
        - lang
        - facebookId
        - googleId
      properties:
        email:
          type: string
          example: tae_chanhom@hotmail.com
        passworld:
          type: string
          example: 029959866Tae
        gender:
          type: string
          example: male
        brithday:
          type: string
          example: 14/12/42
        firstname:
          type: string
          example: John
        lastname:
          type: string
          example: Smith
        role:
          type: string
          example: Employee
        lang:
          type: string
          example: Thai
        interest:
          type: string
          example: Coffee shop
        facebookId:
          type: string
          example: rugileuglut
        googleId:
          type: string
          example: "-"

    post:
      type: object
      required:
        - postID
        - category
        - shopname
        - description
        - wage
        - min
        - max
        - location
        - province
        - occupation
      properties:
        postID:
          type: integer
          example: 1
        category:
          type: string
          example: Coffee shop
        shopname:
          type: string
          example: U-coffee
        description:
          type: string
          example: information about you shop
        wage:
          type: string
          example: Week
        min:
          type: integer
          example: 1000
        max:
          type: integer
          example: 8000
        location:
          type: string
          example: lamlugar 12130
        province:
          type: string
          example: bangkok
        occupation:
          type: string
          example: bartender
        createdAt:
          type: string
        updatedAt:
          type: string

    profile_employee:
      type: object
      required:
        - id
        - firstname
        - lastname
        - birthday
        - age
        - email
        - number
        - interest
        - language
        - experience
      properties:
        id:
          type: integer
          example: 1
        firstname:
          type: string
          example: Rick
        lastname:
          type: string
          example: Sanchez
        birthday:
          type: string
          example: 29/2/1999
        age:
          type: integer
          example: 19
        email:
          type: string
          example: rick@gmail.com
        number:
          type: string
          example: 089-999
        interest:
          type: string
          example: spaceship crew
        language:
          type: string
          example: English
        experience:
          type: string
          example: none

    profile_employer:
      type: object
      required:
        - companyname
        - phonenumber
        - email
        - website
        - address
      properties:
        companyname:
          type: string
          example: UTNai Company
        phoneNumber:
          type: string
          example: 032-051-4216
        email:
          type: string
          example: UTNai@gmail.com
        website:
          type: integer
          example: UTNai.com
        address:
          type: string
          example: >-
            11600  New Petchaburi Rd. Makkasan Sub-area   Ratchathewi Area Krung
            Thep Maha Nakhon   10400 Thailand.
    package:
      type: object
      required:
        - level
        - price
        - timerange
        - postrange
        - positions
      properties:
        level:
          type: integer
          example: 1
        price:
          type: integer
          example: 500
        timeRange:
          type: integer
          example: 1
        postRange:
          type: string
          example: Unlimited
        positions:
          type: integer
          example: 1

    employerlist:
      type: object
      properties:
        employerId1:
          type: integer
          example: 489
        employerId2:
          type: integer
          example: 424
        employerId3:
          type: integer
          example: 749

    returnregis:
      type: object
      properties:
        id:
          type: string
          example: 152
        email:
          type: string
          example: tae_chanhom@hotmail.com
        gender:
          type: string
          example: male
        brithday:
          type: string
          example: 14/12/42
        firstname:
          type: string
          example: John
        lastname:
          type: string
          example: Smith
        role:
          type: string
          example: Employee
        lang:
          type: string
          example: Thai
        interest:
          type: string
          example: Coffee shop
        facebookId:
          type: string
          example: rugileuglut
        googleId:
          type: string
          example: "-"

  requestBodies:
    profile_employee:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/profile_employee'
      description: Updated user object
      required: true
    post:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/post'
      required: true